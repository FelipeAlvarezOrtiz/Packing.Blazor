@using Packing.Shared.Presentaciones
@using Packing.Shared.Pedidos
@inject HttpClient _cliente
@inject IJSRuntime JsRuntime

@if (GrupoBlock is null || FormatosDisponiblesEnGrupo is null || PresentacionesDisponibles is null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
    <div class="row">
        <div class="col d-flex justify-content-center">
            <p>Cargando productos, espere por favor ...</p>
        </div>
    </div>
}
else
{
    <MudCard Elevation="3" Class="p-1 mt-3">
        <MudCardMedia Image="@PathImagen" Height="250"/>
        <MudCardContent>
            <div class="row">
                <div class="col-12">
                    <h5 class="card-title text-sm-center text-md-left">&nbsp;@GrupoBlock.NombreGrupo</h5>
                    <p class="card-text">
                        @if (FormatosDisponiblesEnGrupo.Count <= 0)
                        {
                            <div class="alert alert-warning text-center" role="alert">
                                <h7>No existen formatos para este grupo.</h7>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <div class="input-group">
                                    <MudSelect T="int" @bind-Value="FormatoIngresado" Label="Formato" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter">
                                        @foreach (var formato in FormatosDisponiblesEnGrupo)
                                        {
                                            <MudSelectItem T="int" Value="formato.IdFormato">@formato.NombreFormato</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudTooltip Text="Buscar presentaciones">
                                        <MudFab Class="mt-2 ml-3" Color="Color.Primary" Size="Size.Medium" Icon="@Icons.Material.Filled.Search" OnClick="BuscarPresentacionesDeFormato" />
                                    </MudTooltip>
                                </div>
                            </div>
                        }
                    </p>
                    <p class="card-text">
                        @if (PresentacionesDisponibles.Count <= 0 || PresentacionesDisponibles is null)
                        {
                            <div class="alert alert-warning text-center" role="alert">
                                <h7>Seleccione un formato para revisar las presentaciones disponibles.</h7>
                            </div>
                        }
                        else
                        {
                            <MudSelect T="int" @bind-Value="PresentacionIngresada" Label="Presentación" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var presentacion in PresentacionesDisponibles)
                                {
                                    <MudSelectItem T="int" Value="presentacion.IdPresentacion">@presentacion.NombrePresentacion</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </p>
                </div>
            </div>
	        <hr />
	        <div class="row">
		        <div class="col-12">
			        <MudNumericField @bind-Value="CantidadProducto" Label="Cantidad" Min="0" Variant="Variant.Outlined" Step="1"/>
		        </div>
	        </div>
	        <div class="row text-center d-flex align-content-center">
		        <div class="col-6 mt-2">
			        <MudFab Class="mt-1 ml-2" Color="Color.Info" Size="Size.Small"
			                Icon="@Icons.Material.Filled.Refresh" Label="Limpiar" OnClick="LimpiarUi">
			        </MudFab>
		        </div>
		        <div class="col-6 mt-2">
			        @if (CantidadProducto > 0 && PresentacionIngresada > 0 && FormatoIngresado > 0)
			        {
				        <MudFab Class="mt-1 ml-2" Color="Color.Success" Size="Size.Small"
				                Icon="@Icons.Material.Filled.Add" Label="Agregar" OnClick="AgregarAlCarroPrimerPaso">
				        </MudFab>
			        }
		        </div>
	        </div>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter] public GrupoProducto GrupoBlock { get; set; }
    [Parameter] public EventCallback<DetalleProductoEnCarro> AgregarAlCarro { get; set; }

    protected IJSObjectReference Modulo;

    public List<Presentacion> PresentacionesDisponibles { get; set; }
    public List<Formato> FormatosDisponiblesEnGrupo { get; set; }

    protected int FormatoIngresado { get; set; }
    protected int PresentacionIngresada { get; set; }
    protected int CantidadProducto { get; set; }
    protected string PathImagen = string.Empty;
    protected BuscarPresentacionesDelFormatoGrupo requestPresentaciones;
    protected DetalleProductoEnCarro payloadCarro;

    protected override async Task OnInitializedAsync()
    {
        var formatoRequest = new FormatosDelGrupo { IdGrupo = GrupoBlock.IdGrupo };
        PresentacionesDisponibles = new List<Presentacion>();
        PathImagen = "/images/grupos/" + GrupoBlock.Imagen+".png";
        var result = await _cliente.PostAsJsonAsync("api/Formatos/ObtenerFormatosDisponibles", formatoRequest);
        if (result.IsSuccessStatusCode)
        {
            FormatosDisponiblesEnGrupo = await result.Content.ReadFromJsonAsync<List<Formato>>();
        }
        StateHasChanged();
    }

    protected async void BuscarPresentacionesDeFormato()
    {
        requestPresentaciones = new BuscarPresentacionesDelFormatoGrupo
        {
            IdGrupo = GrupoBlock.IdGrupo,
            IdFormato = FormatoIngresado
        };
        var result = await _cliente.PostAsJsonAsync("api/Presentaciones/ObtenerPresentacionesDelGrupo", requestPresentaciones);
        if (result.IsSuccessStatusCode)
        {
            PresentacionesDisponibles = await result.Content.ReadFromJsonAsync<List<Presentacion>>();
        }
        StateHasChanged();
    }

    protected void LimpiarUi()
    {
        PresentacionesDisponibles.Clear();
        FormatoIngresado = 0;
        PresentacionIngresada = 0;
        CantidadProducto = 0;
        StateHasChanged();
    }

    protected async void AgregarAlCarroPrimerPaso()
    {
        Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
        //obtener producto
        var request = new ObtenerProductoParaPedido()
        {
            IdGrupo = GrupoBlock.IdGrupo,
            IdPresentacion = PresentacionIngresada,
            IdFormato = FormatoIngresado
        };
        //enviar al eventcallback
        var result = await _cliente.PostAsJsonAsync("api/Productos/ObtenerInfoProducto", request);
        if (result.IsSuccessStatusCode)
        {
            var productoObtenido = await result.Content.ReadFromJsonAsync<Producto>();
            payloadCarro = new DetalleProductoEnCarro()
            {
                Cantidad = CantidadProducto,
                ProductoIncorporado = productoObtenido
            };
            await AgregarAlCarro.InvokeAsync(payloadCarro);
            LimpiarUi();
            await Modulo.InvokeVoidAsync("Exito");
        }
        else
        {
            await Modulo.InvokeVoidAsync("Error");
        }

    }
}
