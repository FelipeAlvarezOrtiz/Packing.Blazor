@page "/Productos/Presentaciones"
@using Packing.Shared.Presentaciones
@inject HttpClient Cliente
@inject NavigationManager Navigator
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Administrador")]
<div class="row">
    <div class="col-6">
        <MudTooltip Text="Atrás">
            <MudFab Icon="@Icons.Outlined.ArrowBack" Size="Size.Small" OnClick="@(() => Navigator.NavigateTo("/Productos/Indice"))"></MudFab>
        </MudTooltip>
    </div>
    <div class="col-6 text-center">
    </div>
</div>
<br />
<h3><i class="fas fa-archive"></i>&nbsp;Presentaciones</h3>
<hr />
@if (PresentacionesEnSistema is null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
    <div class="row">
        <div class="col d-flex justify-content-center">
            <p>Cargando presentaciones, espere por favor ...</p>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <MudSimpleTable Dense="true" Hover="true" Bordered="true" Striped="true" Style="overflow-x: auto;">
                <thead class="thead-dark">
                <tr>
                    <th class="text-center">
                        Nombre presentación
                    </th>
                    <th class="text-center">
                        Acciones
                    </th>
                </tr>
                </thead>
                <tbody>
                @foreach (var presentacion in PresentacionesEnSistema)
                {
                    <tr>
                        <td class="text-center">@presentacion.NombrePresentacion</td>
                        <td class="text-center">
                            <MudTooltip Text="Editar">
                                <MudFab Class="mt-2 ml-3" Color="Color.Primary" Size="Size.Medium"
                                        Icon="@Icons.Material.Filled.Edit"
                                        OnClick="() => AbrirModalUpdate(presentacion.IdPresentacion, presentacion.NombrePresentacion)">
                                </MudFab>
                            </MudTooltip>
                        </td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </div>
    </div>
    <div class="row d-flex align-content-center">
        <div class="col-12 text-center">
            <MudFab IconSize="Size.Medium" Label="Nueva presentación" OnClick="AbrirDialogPresentacion" Color="Color.Success" Icon="@Icons.Material.Filled.Add"></MudFab>
        </div>
    </div>
}

<MudDialog @bind-IsVisible="ModalVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Editar presentación
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="UpdatePresentacionRequest" OnValidSubmit="ActualizarPresentacion">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="container-fluid">
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-form-label" for="nuevoNombrePresentacion">Nombre</label>
                            <MudTextField id="nuevoNombrePresentacion" Variant="Variant.Outlined" @bind-Value="UpdatePresentacionRequest.NombrePresentacion" />
                            <ValidationMessage For="@(()=>UpdatePresentacionRequest.NombrePresentacion)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>
            
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="CerrarModal"></MudFab>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Save" Color="Color.Default" OnClick="ActualizarPresentacion" Label="Guardar"></MudFab>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="NuevaPresentacionVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Nueva presentación
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="NuevaPresentacion" OnValidSubmit="GuardarPresentacion">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="container-fluid">
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-form-label" for="NombrePresentacion">Nombre</label>
                            <MudTextField id="NombrePresentacion" Variant="Variant.Outlined" @bind-Value="NuevaPresentacion.NombrePresentacion" />
                            <ValidationMessage For="@(()=>NuevaPresentacion.NombrePresentacion)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Cancel" Label="Cerrar" OnClick="CerrarNuevaPresentacion"></MudFab>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="GuardarPresentacion" Label="Guardar"></MudFab>
    </DialogActions>
</MudDialog>

@code {
    protected List<Presentacion> PresentacionesEnSistema;
    protected ActualizarPresentacionCommand UpdatePresentacionRequest = new();
    protected CrearPresentacionCommand NuevaPresentacion = new();
    protected bool ModalVisible = false, NuevaPresentacionVisible = false;
    protected IJSObjectReference Modulo;

    protected override async Task OnInitializedAsync()
    {
        PresentacionesEnSistema = await Cliente.GetFromJsonAsync<List<Presentacion>>("api/Presentaciones/ObtenerPresentaciones");
        StateHasChanged();
    }

    protected void AbrirModalUpdate(int idPresentacion, string nombrePresentacion)
    {
        UpdatePresentacionRequest = new()
        {
            IdPresentacion = idPresentacion,
            NombrePresentacion = nombrePresentacion
        };
        ModalVisible = true;
    }

    protected async void ActualizarPresentacion()
    {
        Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
        var result = await Cliente.PostAsJsonAsync("api/Presentaciones/ActualizarPresentacion", UpdatePresentacionRequest);
        if (result.IsSuccessStatusCode)
        {
            await Modulo.InvokeVoidAsync("Exito");
            PresentacionesEnSistema = await Cliente.GetFromJsonAsync<List<Presentacion>>("api/Presentaciones/ObtenerPresentaciones");
            ModalVisible = false;
            StateHasChanged();
        }
        else
        {
            await Modulo.InvokeVoidAsync("Error");
        }
    }

    protected void CerrarModal()
    {
        UpdatePresentacionRequest = new ActualizarPresentacionCommand();
        ModalVisible = false;
    }

    protected void AbrirDialogPresentacion() => NuevaPresentacionVisible = true;

    protected void CerrarNuevaPresentacion() => NuevaPresentacionVisible = false;

    protected async void GuardarPresentacion()
    {
        try
        {
            Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
            await Modulo.InvokeVoidAsync("Exito");
        }
        catch (Exception error)
        {
            Console.WriteLine(error.Message);
            await Modulo.InvokeVoidAsync("Error");
        }
    }
}
