@inject HttpClient _cliente
@inject NavigationManager Navigator
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Administrador")]
@page "/Empresas/Indice"

<h3><i class="far fa-building"></i>&nbsp;Empresas en sistema</h3>
<hr />
@if (EmpresasEnSistema is null)
{
	<MudSkeleton/>
	<MudSkeleton Animation="Animation.False"/>
	<MudSkeleton Animation="Animation.Wave"/>
	<div class="row">
		<div class="col d-flex justify-content-center">
			<p>Cargando información, espere por favor ...</p>
		</div>
	</div>
}
else if (EmpresasEnSistema.Count == 0)
{
	<div class="col-12 text-center alert alert-info"><h4><i class="fas fa-info-circle"></i>&nbsp;No existen empresas creadas en el sistema.</h4></div>
}
else
{
    <div class="row">
        @foreach (var empresa in EmpresasEnSistema)
        {
            <div class="col-sm-12 col-md-6 col-lg-6 col-xl-4 p-1">
                <ComponenteEmpresa EmpresaEntrante="empresa" BorrarEmpresa="EliminarEmpresa"></ComponenteEmpresa>
            </div>
        }
    </div>
	<hr />
}
<div class="row">
	<div class="col-md-12 text-center">
		<MudFab Color="Color.Success" Size="Size.Medium" OnClick="CrearUsuarioEvent" aria-label="Nueva Empresa"
		        Icon="@Icons.Material.Filled.Add" Label="Nueva empresa"></MudFab>
	</div>
</div>
<br />
<br />
<br />
<br />

@code {
    protected List<Empresa> EmpresasEnSistema;
	protected IJSObjectReference Modulo;

    protected override async Task OnInitializedAsync()
    {
        EmpresasEnSistema = await _cliente.GetFromJsonAsync<List<Empresa>>("api/Empresas/ObtenerEmpresas");
        StateHasChanged();
    }

    protected void CrearUsuarioEvent() {
        Navigator.NavigateTo("/Empresas/Crear"); 
    }

	protected async void EliminarEmpresa(int idEmpresa)
	{
		Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
		try
		{
			var result = await _cliente.DeleteAsync("api/Empresas/DeshabilitarEmpresa/" + idEmpresa);
			if (result.IsSuccessStatusCode)
			{
				EmpresasEnSistema = await _cliente.GetFromJsonAsync<List<Empresa>>("api/Empresas/ObtenerEmpresas");
				StateHasChanged();
				await Modulo.InvokeVoidAsync("Exito");
			}
			else
			{
				var mensaje = await result.Content.ReadAsStringAsync();
				await Modulo.InvokeVoidAsync("ErrorGeneral",mensaje);
			}
		}
		catch (Exception error)
		{
			await Modulo.InvokeVoidAsync("ErrorGeneral",error.Message);
		}
	}
}
