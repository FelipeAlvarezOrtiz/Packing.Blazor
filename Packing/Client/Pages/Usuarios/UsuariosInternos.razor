@page "/Usuarios/Internos"
@using Packing.Client.Pages.Usuarios.Componentes
@inject HttpClient _cliente
@inject NavigationManager _navigator
@inject IJSRuntime JsRuntime
@attribute [Authorize(Roles = "Administrador")]

<h3><i class="fas fa-user-cog"></i>&nbsp;Usuarios internos</h3>
<hr />
@if (UsuariosColones is null)
{
	<MudSkeleton />
	<MudSkeleton Animation="Animation.False" />
	<MudSkeleton Animation="Animation.Wave" />
	<div class="row">
		<div class="col d-flex justify-content-center">
			<p>Cargando usuarios, espere por favor ...</p>
		</div>
	</div>
}
else
{
	if (!UsuariosColones.Any())
	{
		<div class="row">
			<div class="col text-center">
				<div class="alert alert-info"><h5><i class="fas fa-info-circle"></i>&nbsp;No existen usuarios de colonos en el sistema.</h5></div>
			</div>
		</div>
	}
	else
	{
		<div class="row">
			@foreach (var usuario in UsuariosColones)
			{
				<div class="col-sm-12 col-md-4">
					<VerUsuarioInterno UsuarioEntrante="usuario" Refrescar="RefrescarUsuarios"></VerUsuarioInterno>
				</div>
			}
		</div>
		
	}
	<br />
	<MudDivider></MudDivider>
	<br />
	<div class="row d-flex align-content-center">
		<div class="col-sm-12 col-md-12 text-center">
			<MudFab Color="Color.Success" Icon="@Icons.Material.Filled.AddCircleOutline" OnClick="@(()=> _navigator.NavigateTo("/Usuarios/Internos/Crear"))"
				ButtonType="ButtonType.Button" Label="Nuevo usuario"></MudFab>
		</div>
	</div>
}

@code {
	protected List<UsuarioInterno> UsuariosColones;

	protected async Task RefrescarUsuarios()
	{
		UsuariosColones = await _cliente.GetFromJsonAsync<List<UsuarioInterno>>("api/Usuarios/ObtenerUsuariosInternos");
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await RefrescarUsuarios();
	}

}
