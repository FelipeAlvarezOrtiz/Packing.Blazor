@page "/Pedidos/CrearPedido"
@using Packing.Shared.Usuarios
@using Packing.Shared.Pedidos
@inject HttpClient Cliente
@inject NavigationManager Navigator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@attribute [Authorize]

<div class="container-fluid">
	<MudTabs @ref="TabGeneral" HideSlider="true" Elevation="2" Rounded="true" Centered="true">
		<MudTabPanel @ref="IngresoProductos">
			<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal">
				<MudTimelineItem Size="Size.Medium" Color="Color.Success"></MudTimelineItem>
				<MudTimelineItem Size="Size.Small"></MudTimelineItem>
				<MudTimelineItem Size="Size.Small"></MudTimelineItem>
			</MudTimeline>
			<div class="row">
				<div class="col-6 text-center"></div>
				<div class="col-6 text-center">
					<MudTooltip Text="Siguiente">
						<MudFab Size="Size.Small" Icon="@Icons.Outlined.ArrowForward" OnClick="(() => Activar(1))"></MudFab>
					</MudTooltip>
				</div>
			</div>
			<hr />
			@if (GruposProducto is null)
			{
				<MudSkeleton />
				<MudSkeleton Animation="Animation.False" />
				<MudSkeleton Animation="Animation.Wave" />
				<div class="row">
					<div class="col d-flex justify-content-center">
						<p>Cargando productos, espere por favor ...</p>
					</div>
				</div>
			}
			else
			{
				<div class="row">
					@foreach (var grupos in GruposProducto)
					{
						<div class="col-sm-12 col-md-6 col-lg-6 col-xl-4">
							<GrupoVerComponent GrupoBlock="grupos" AgregarAlCarro="AgregarAlCarro"></GrupoVerComponent>
						</div>
					}
				</div>
			}
		</MudTabPanel>
		<MudTabPanel @ref="ConfirmacionProductos">
			<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal">
				<MudTimelineItem Size="Size.Small"></MudTimelineItem>
				<MudTimelineItem Size="Size.Medium" Color="Color.Success"></MudTimelineItem>
				<MudTimelineItem Size="Size.Small"></MudTimelineItem>
			</MudTimeline>
			<div class="row">
				<div class="col-6 text-center">
					<MudTooltip Text="Anterior">
						<MudFab Size="Size.Small" Icon="@Icons.Outlined.ArrowBack" OnClick="(() => Activar(0))"></MudFab>
					</MudTooltip>
				</div>
				<div class="col-6 text-center">
					<MudTooltip Text="Siguiente">
						<MudFab Size="Size.Small" Icon="@Icons.Outlined.ArrowForward" OnClick="(() => Activar(2))"></MudFab>
					</MudTooltip>
				</div>
			</div>
			<hr />
			@if (CarroPedido.Count > 0)
			{
				<div class="row">
					@foreach (var detalle in CarroPedido)
					{
						<div class="col-sm-12 col-md-6 col-lg-6 col-xl-6 p-1">
							<ConfirmacionPedido Producto=detalle.Value.ProductoIncorporado CantidadProducto=detalle.Value.Cantidad
										ActualizarCantidad="ActualizarCantidadProducto" />
						</div>
					}
				</div>
			}
			else
			{
				<br />
				<div class="col">
					<div class="row alert alert-info">
						<div class="col d-flex justify-content-center">
							<h5><i class="fas fa-info-circle"></i>&nbsp;No hay productos agregados en el carro.</h5>
						</div>
					</div>
				</div>
				<hr />
			}
		</MudTabPanel>
		<MudTabPanel @ref="ConfirmacionDatos">
			<MudTimeline TimelineOrientation="TimelineOrientation.Horizontal">
				<MudTimelineItem Size="Size.Small"></MudTimelineItem>
				<MudTimelineItem Size="Size.Small"></MudTimelineItem>
				<MudTimelineItem Size="Size.Medium" Color="Color.Success"></MudTimelineItem>
			</MudTimeline>
			@if (!Enviando)
			{
				<div class="row">
					<div class="col-6 text-center">
						<MudTooltip Text="Anterior">
							<MudFab Size="Size.Small" Icon="@Icons.Outlined.ArrowBack" OnClick="(() => Activar(1))">Atrás</MudFab>
						</MudTooltip>
					</div>
					<div class="col-6 text-center">
						<MudTooltip Text="Siguiente">
							@*<MudFab Icon="@Icons.Outlined.ArrowForward" OnClick="(() => Activar(3))">Siguiente</MudFab>*@
							<MudFab Icon="@Icons.Outlined.Send" OnClick="IngresarPedido" Label="Enviar" Size="Size.Small" Color="Color.Success"></MudFab>
						</MudTooltip>
					</div>
				</div>
				<hr />
				<div class="row">
					<div class="col-12">
						@*<DatosPersonales @bind-Observacion="PedidoRequest.Observacion"/>*@
						<div class="row ml-1">
							<!--Datos del usuario -->
						<div class="col-md-12 col-lg-6 p-1">
								<MudField Label="Nombre" Variant="Variant.Outlined">@InfoUsuario.NombreUsuario</MudField>
							</div>
							<div class="col-md-12 col-lg-6 p-1">
								<MudField Label="R.U.T" Variant="Variant.Outlined">@InfoUsuario.Empresa.RutEmpresa</MudField>
							</div>
							<div class="col-12 p-1">
								<MudTextField Label="Dirección" Variant="Variant.Outlined" @bind-Value="InfoUsuario.Direccion">@InfoUsuario.Direccion</MudTextField>
							</div>
						</div>
						<br />
						<hr />
						<div class="row">
							<div class="col-12">
								<MudTextField Placeholder="Cualquier dato extra acerca de tu pedido" T="string"
										  Label="Observaciones" Variant="Variant.Outlined" @bind-Value="PedidoRequest.Observacion" Lines="6" />
							</div>
						</div>
					</div>
				</div>
			}
			else
			{
				<br />
				<br />
				<MudSkeleton />
				<MudSkeleton Animation="Animation.False" />
				<MudSkeleton Animation="Animation.Wave" />
				<div class="row">
					<div class="col d-flex justify-content-center">
						<p>Creando el pedido, espere ...</p>
					</div>
					<div class="col text-center d-flex justify-content-center">
						<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
					</div>
				</div>
				<MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
				<br />
			}
		</MudTabPanel>
	</MudTabs>
</div>

@code {
	protected List<GrupoProducto> GruposProducto;
	protected MudTabs TabGeneral;
	protected MudTabPanel IngresoProductos, ConfirmacionProductos, ConfirmacionDatos, ConfirmacionPedido;
	protected Dictionary<int, DetalleProductoEnCarro> CarroPedido = new();
	protected string emailUsuario = string.Empty;
	protected IJSObjectReference Modulo;
	protected ObtenerInfoUsuarioDto requestInfoUsuario;
	protected AppUser InfoUsuario = new();
	protected PedidoRequestDto PedidoRequest = new();
	protected bool Enviando;

	protected override async Task OnInitializedAsync()
	{
		Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
		try
		{
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			if (authState.User.Identity != null) emailUsuario = authState.User.Identity.Name;
			requestInfoUsuario = new ObtenerInfoUsuarioDto()
				{
					EmailUsuarioBuscado = emailUsuario,
					UsuarioSolicitante = emailUsuario
				};
			var resultInfo = await Cliente.PostAsJsonAsync("api/Usuarios/ObtenerUsuario", requestInfoUsuario);
			if (resultInfo.IsSuccessStatusCode)
			{
				InfoUsuario = await resultInfo.Content.ReadFromJsonAsync<AppUser>();
			}
			GruposProducto = await Cliente.GetFromJsonAsync<List<GrupoProducto>>("api/Grupos/ObtenerGrupos");
		}
		catch (Exception error)
		{
			await Modulo.InvokeVoidAsync("Error");
			Console.WriteLine(error.Message);
		}
	}

	protected void AgregarAlCarro(DetalleProductoEnCarro nuevoItem)
	{
		if (CarroPedido.TryGetValue(nuevoItem.ProductoIncorporado.IdProducto, out var detalle))
		{
			var nuevaCantidad = detalle.Cantidad + nuevoItem.Cantidad;
			detalle.Cantidad = nuevaCantidad;
			CarroPedido[nuevoItem.ProductoIncorporado.IdProducto] = detalle;
		}
		else
		{
			CarroPedido.Add(nuevoItem.ProductoIncorporado.IdProducto, nuevoItem);
		}
	}

	protected void Activar(int index)
	{
		TabGeneral.ActivatePanel(index);
	}

	protected async void ActualizarCantidadProducto(Tuple<int, int> updateRequest)
	{
		Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
		if (!CarroPedido.ContainsKey(updateRequest.Item1))
		{
			Console.WriteLine("El producto no existe en el diccionario");
		}
		if (CarroPedido.TryGetValue(updateRequest.Item1, out var productoIngresado))
		{
			productoIngresado.Cantidad = updateRequest.Item2;
			CarroPedido[updateRequest.Item1] = productoIngresado;
			Snackbar.Clear();
			Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
			Snackbar.Add("Actualizado.", Severity.Success, config =>
			{
				config.Icon = Icons.Outlined.Check;

			});
			StateHasChanged();
		}
		else
		{
			await Modulo.InvokeVoidAsync("Error");
			Console.WriteLine("Ha ocurrido un error");
		}
	}

	protected async void IngresarPedido()
	{
		Enviando = true;
		StateHasChanged();
		var listaProductos = CarroPedido.Select(key => new DetallePedidoDto()
			{
				Cantidad = key.Value.Cantidad,
				IdProducto = key.Key
			}).ToList();
		Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");

		PedidoRequest.NombreUsuario = emailUsuario;
		PedidoRequest.ProductosEnPedido = listaProductos;
		try
		{
			var result = await Cliente.PostAsJsonAsync("api/Pedidos/IngresarPedido", PedidoRequest);
			if (result.IsSuccessStatusCode)
			{
				//todo correcto
				Enviando = false;
				StateHasChanged();
				await Modulo.InvokeVoidAsync("Exito");
				CarroPedido.Clear();
				Navigator.NavigateTo("/");
			}
			else
			{
				await Modulo.InvokeVoidAsync("Error");
				Console.WriteLine("Error");
			}
		}
		catch (Exception error)
		{
			await Modulo.InvokeVoidAsync("Error");
			Console.WriteLine(error.Message);
		}
	}

}
