@using Packing.Shared.Pedidos

<MudCard Outlined="true" Elevation="3">
    <MudCardContent>
        <div class="row">
            <div class="col-md-12">
                <p>Producto: <b>&nbsp;@Detalle.ProductoInterno.NombreParaBusqueda</b>.</p>
                <p>Formato: <b>&nbsp;@Detalle.ProductoInterno.Formato.NombreFormato</b>.</p>
                <p>Grupos: <b>&nbsp;@Detalle.ProductoInterno.Grupo.NombreGrupo</b>.</p>
	            <p>Presentación: <b>&nbsp;@Detalle.ProductoInterno.Presentacion.NombrePresentacion</b>.</p>
	            <AuthorizeView Roles="Cliente">
					<p>Estado: <b>&nbsp;@Detalle.Estado.NombreEstado</b>.</p>
                </AuthorizeView>
            </div>
	        <div class="col-md-12">
		        <AuthorizeView Roles="Administrador">
			        <MudSelect T="int" @bind-Value="IdEstadoSeleccionado" Label="Estado" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter">
				        @foreach (var estado in ListaEstados)
				        {
					        if (Detalle.Estado.IdEstadoPedido > estado.IdEstadoPedido) continue;
					        <MudSelectItem T="int" Value="estado.IdEstadoPedido">@estado.NombreEstado</MudSelectItem>
				        }
			        </MudSelect>
			        <br />
		        </AuthorizeView>
	        </div>
        </div>
	    <MudDivider></MudDivider>
	    <div class="row text-center d-flex align-content-center">
		    @if (Detalle.Estado.IdEstadoPedido < 4)
		    {
			    <div class="col-sm-6 col-md-6 mt-2">
				    @if (Detalle.Estado.IdEstadoPedido == 1)
				    {
					    <MudTooltip Text="Eliminar">
						    <MudFab Icon="@Icons.Outlined.Delete" Size="Size.Small" Color="Color.Error"
						            OnClick="@(async () => await BorrarDetalle.InvokeAsync(Detalle.IdDetalle))"></MudFab>
					    </MudTooltip>
					    
				    }
			    </div>
			    <div class="col-sm-6 col-md-6 mt-2">
				    <AuthorizeView Roles="Administrador">
						<MudTooltip Text="Actualizar">
							<MudFab Icon="@Icons.Outlined.Update" Size="Size.Small" Color="Color.Info"
					            OnClick="@(async () => await ActualizarEstado.InvokeAsync(Tuple.Create(CabeceraId, Detalle.IdDetalle, IdEstadoSeleccionado)))"></MudFab>
						</MudTooltip>
				    </AuthorizeView>
			    </div>
		    }
		    else
		    {
			    <div class="col-12 mt-2">
				    <MudAlert Severity="Severity.Success">Este producto ya se ha procesado completamente.</MudAlert>
			    </div>
		    }
	    </div>
    </MudCardContent>
</MudCard>

@code {
    protected int IdEstadoSeleccionado { get; set; }
    [Parameter]
    public DetallePedido Detalle { get; set; }
    [Parameter]
    public Guid CabeceraId { get; set; }
    [Parameter]
    public List<EstadoPedido> ListaEstados { get; set; }
    [Parameter]
    public EventCallback<Tuple<Guid,Guid,int>> ActualizarEstado { get; set; }
    [Parameter]
    public EventCallback<Guid> BorrarDetalle { get; set; }

    protected override Task OnInitializedAsync()
    {
        IdEstadoSeleccionado = Detalle.Estado.IdEstadoPedido;
        return base.OnInitializedAsync();
    }

}
