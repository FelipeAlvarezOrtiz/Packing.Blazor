@inject HttpClient Cliente
@inject NavigationManager Navigator
@attribute [Authorize]
@inject IJSRuntime JsRuntime
@page "/Pedidos/Ver/{IdPedido}"
@using Packing.Shared.Pedidos
<MudTooltip Text="Atrás">
    <MudFab Icon="@Icons.Outlined.ArrowBack" Size="Size.Small" OnClick="@(() => Navigator.NavigateTo("/"))"></MudFab>
</MudTooltip>
<br />
<br />
<h3><i class="fas fa-sitemap"></i>&nbsp;Detalles del pedido</h3>
<hr />
@if (string.IsNullOrEmpty(IdPedido.ToString()))
{
    Navigator.NavigateTo("/Pedidos");
}
else if (ListaDetalles is null && PedidoInterno is null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
    <div class="row">
        <div class="col d-flex justify-content-center">
            <p>Cargando información, espere por favor ...</p>
        </div>
    </div>
}
else
{
<div class="row">
    <div class="col-sm-12 col-md-4 col-lg-4">
        <MudTextField @bind-Value="PedidoInterno.EmpresaMandante.NombreEmpresa" ReadOnly="true" Label="Empresa"></MudTextField>
    </div>
    <div class="col-sm-12 col-md-4 col-lg-4">
        <MudTextField @bind-Value="PedidoInterno.FechaPedido" ReadOnly="true" Class="col-sm-12 col-md-4" Label="Fecha del pedido"></MudTextField>
    </div>
    <div class="col-sm-12 col-md-4 col-lg-4">
        <MudTextField @bind-Value="PedidoInterno.FechaUltimaActualizacion" ReadOnly="true" Class="col-sm-12 col-md-4" Label="Última actualización"></MudTextField>
    </div>
    <div class="col-sm-12 col-md-6 col-lg-6">
        <MudTextField @bind-Value="PedidoInterno.EmpresaMandante.PersonaContacto" ReadOnly="true" Class="col-sm-12 col-md-4" Label="Persona contacto"></MudTextField>
    </div>
    <div class="col-sm-12 col-md-6 col-lg-6">
        <MudTextField @bind-Value="PedidoInterno.EmpresaMandante.Direccion" ReadOnly="true" Class="col-sm-12 col-md-4" Label="Dirección"></MudTextField>
    </div>
</div>
    <hr />
    <h5><i class="fas fa-boxes"></i>&nbsp;Productos en el pedido</h5>
    <br />
    <div class="row">
        @foreach (var detalle in ListaDetalles)
        {
            <div class="col-sm-12 col-md-4">
                <DetalleComponent ListaEstados="Estados" ActualizarEstado="ActualizarDetalle" Detalle="detalle"
                                   CabeceraId="Guid.Parse(IdPedido)" BorrarDetalle="BorrarDetalle"></DetalleComponent>
                <br/>
            </div>
        }
    </div>
}

@code {
    [Parameter] public string IdPedido { get; set; }
    protected Pedido PedidoInterno;
    protected Dictionary<int,DetallePedido> ProductosEnPedido { get; set; }
    protected List<DetallePedido> ListaDetalles;
    protected ObtenerDetallesDelPedidoDto requestDetalles;
    protected List<EstadoPedido> Estados;
    protected IJSObjectReference Modulo;

    protected override async Task OnInitializedAsync()
    {
        var pedidoInternoId = Guid.Parse(IdPedido);
        requestDetalles = new ObtenerDetallesDelPedidoDto()
        {
            PedidoCabecera = pedidoInternoId
        };
        var resultPedido = await Cliente.PostAsJsonAsync("api/Pedidos/ObtenerInfoPedido", new ObtenerInfoPedidoDto(){ GuidPedido = pedidoInternoId});
        if (resultPedido.IsSuccessStatusCode)
        {
            PedidoInterno = await resultPedido.Content.ReadFromJsonAsync<Pedido>();
        }
        Estados = await Cliente.GetFromJsonAsync<List<EstadoPedido>>("api/Pedidos/ObtenerEstados");
        var result = await Cliente.PostAsJsonAsync("api/Pedidos/ObtenerDetalles", requestDetalles);
        if (result.IsSuccessStatusCode)
        {
            try
            {
                ListaDetalles = await result.Content.ReadFromJsonAsync<List<DetallePedido>>();
                StateHasChanged();
            }
            catch (Exception error)
            {
                Console.WriteLine(error.Message);
                ListaDetalles = new();
            }
        }
        else
        {
            Console.WriteLine("Error");
        }
    }

    protected void EliminarProductoDelPedido(DetallePedido detalle)
    {
        if (ProductosEnPedido.ContainsKey(detalle.ProductoInterno.IdProducto))
        {
            ProductosEnPedido.Remove(detalle.ProductoInterno.IdProducto);
        }
    }

    protected void ActualizarCantidad(DetallePedido detalle, int nuevaCantidad)
    {
        if (ProductosEnPedido.ContainsKey(detalle.ProductoInterno.IdProducto))
        {
            detalle.Cantidad = (uint)nuevaCantidad;
            detalle.CantidadTotales = (uint)nuevaCantidad * (uint)detalle.ProductoInterno.Formato.UnidadPorFormato;
            detalle.FechaActualizacion = DateTime.Now;
            ProductosEnPedido[detalle.ProductoInterno.IdProducto] = detalle;
        }
    }

    protected async void ActualizarDetalle(Tuple<Guid,Guid,int> requestActualizar)
    {
        //pegarle al cliente para borrar la wea
        Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
        var actualizarEstado = new ActualizarEstadoPedido()
        {
            IdPedido = requestActualizar.Item1,
            IdDetalle = requestActualizar.Item2,
            NuevoEstado = requestActualizar.Item3
        };
        var result = await Cliente.PutAsJsonAsync("api/Pedidos/ActualizarDetalle", actualizarEstado);
        if (result.IsSuccessStatusCode)
        {
            await Modulo.InvokeVoidAsync("Exito");
            BuscarDetalles();
            StateHasChanged();
        }
    }

    protected async void BorrarDetalle(Guid requestBorrar)
    {
        var requestBorrarDetalle = new BorrarDetallePedidoDto()
        {
            IdCabecera = Guid.Parse(IdPedido),
            IdDetalle = requestBorrar
        };
        var result = await Cliente.PostAsJsonAsync("api/Pedidos/EliminarDetalle", requestBorrarDetalle);
        if (!result.IsSuccessStatusCode) return;
        BuscarDetalles();
        StateHasChanged();
        await Modulo.InvokeVoidAsync("Exito");
    }

    protected async void BuscarDetalles()
    {
        requestDetalles = new ObtenerDetallesDelPedidoDto()
        {
            PedidoCabecera = Guid.Parse(IdPedido)
        };
        Estados = await Cliente.GetFromJsonAsync<List<EstadoPedido>>("api/Pedidos/ObtenerEstados");
        var result = await Cliente.PostAsJsonAsync("api/Pedidos/ObtenerDetalles", requestDetalles);
        if (!result.IsSuccessStatusCode) return;
        try
        {
            ListaDetalles = await result.Content.ReadFromJsonAsync<List<DetallePedido>>();
            StateHasChanged();
        }
        catch (Exception error)
        {
            Console.WriteLine(error.Message);
            ListaDetalles = new();
        }
    }
}
