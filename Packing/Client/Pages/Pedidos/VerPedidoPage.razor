@inject HttpClient Cliente
@inject NavigationManager Navigator
@attribute [Authorize]

@page "/Pedidos/Ver/{IdPedido}"

@if (string.IsNullOrEmpty(IdPedido.ToString()))
{
    Navigator.NavigateTo("/Pedidos");
}
else if (PedidoInterno is null)
{
    <div class="row">
        <div class="col-12 text-center">
            <MudAlert Class="m-2" Severity="Severity.Warning" Variant="Variant.Filled">Este producto ha sido sacado del pedido, se actualizará su lista una vez recargue la página.</MudAlert>
        </div>
    </div>
}
else
{
    <MudPaper>

    </MudPaper>
}

@code {
    [Parameter] public Guid IdPedido { get; set; }
    protected Pedido PedidoInterno { get; set; }
    protected Dictionary<int,DetallePedido> ProductosEnPedido { get; set; }

    protected async override Task OnInitializedAsync()
    {
        PedidoInterno = await Cliente.GetFromJsonAsync<Pedido>("");
    }

    protected void EliminarProductoDelPedido(DetallePedido detalle)
    {
        if (ProductosEnPedido.ContainsKey(detalle.ProductoInterno.IdProducto))
        {
            ProductosEnPedido.Remove(detalle.ProductoInterno.IdProducto);
        }
    }

    protected void ActualizarCantidad(DetallePedido detalle, int nuevaCantidad)
    {
        if (ProductosEnPedido.ContainsKey(detalle.ProductoInterno.IdProducto))
        {
            detalle.Cantidad = (uint)nuevaCantidad;
            detalle.CantidadTotales = (uint)nuevaCantidad * (uint)detalle.ProductoInterno.Formato.UnidadPorFormato;
            detalle.FechaActualizacion = DateTime.Now;
            ProductosEnPedido[detalle.ProductoInterno.IdProducto] = detalle;
        }
    }
}
