@using System.IO
@using System.Threading
@using Packing.Shared.FormatosDto
@using Packing.Shared.GruposDto
@using Packing.Shared.Presentaciones
@using Packing.Shared.Productos
@inject HttpClient _cliente
@inject NavigationManager Navigator
@inject IJSRuntime JsRuntime
@page "/Productos/Crear"
<div class="row">
    <div class="col-6">
        <MudTooltip Text="Atrás">
            <MudFab Icon="@Icons.Outlined.ArrowBack" Size="Size.Small" OnClick="@(() => Navigator.NavigateTo("/Productos/Indice"))"></MudFab>
        </MudTooltip>
    </div>
    <div class="col-6 text-center">
    </div>
</div>
<br />
<InputFile id="fileInput" OnChange="UploadFiles" hidden />
<h3><i class="fas fa-box-open"></i>&nbsp;Nuevo producto</h3>
<hr />
@if (Formatos is null || Grupos is null || Presentaciones is null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <MudSkeleton />
                <MudSkeleton Animation="Animation.False" />
                <MudSkeleton Animation="Animation.Wave" />
            </div>
        </div>
    </div>
}
else
{
    <EditForm Model="NuevoProducto" OnValidSubmit="AgregarProducto">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="container-fluid">
            <div class="row form-group">
                <div class="col-md-12">
                    <div class="form-group">
                        <MudTextField Label="Nombre" Variant="Variant.Outlined" @bind-Value="NuevoProducto.NombreProducto" id="nombreNuevoProducto" />
                        <ValidationMessage For="@(()=>NuevoProducto.NombreProducto)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="row form-group">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="input-group">
                            <MudSelect T="int" @bind-Value="NuevoProducto.IdFormato" Label="Formato" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var formato in Formatos)
                                {
                                    <MudSelectItem T="int" Value="formato.IdFormato">@formato.NombreFormato</MudSelectItem>
                                }
                            </MudSelect>&nbsp;
                            <MudFab Class="mt-2" Color="Color.Primary" Size="Size.Medium" Icon="@Icons.Material.Filled.Add" OnClick="AbrirDialogFormato" aria-label="Agregar" />
                            <ValidationMessage For="@(()=>NuevoProducto.IdFormato)"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="input-group">
                            <MudSelect T="int" @bind-Value="NuevoProducto.IdGrupo" Label="Grupo" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var grupo in Grupos)
                                {
                                    <MudSelectItem T="int" Value="grupo.IdGrupo">@grupo.NombreGrupo</MudSelectItem>
                                }
                            </MudSelect>&nbsp;
                            <MudFab Class="mt-2" Color="MudBlazor.Color.Primary" Size="Size.Medium" Icon="@Icons.Material.Filled.Add" OnClick="AbrirDialogGrupo" aria-label="Agregar" />
                            <ValidationMessage For="@(()=>NuevoProducto.IdGrupo)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-9">
                    <div class="form-group">
                        <div class="input-group">
                            <MudSelect T="int" @bind-Value="NuevoProducto.IdPresentacion" Label="Presentación" Strict="true" Variant="Variant.Outlined" Format="F2" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var presentacion in Presentaciones)
                                {
                                    <MudSelectItem T="int" Value="presentacion.IdPresentacion">@presentacion.NombrePresentacion</MudSelectItem>
                                }
                            </MudSelect>&nbsp;
                            <MudFab Class="mt-2" Color="Color.Primary" Size="Size.Medium" Icon="@Icons.Material.Filled.Add" OnClick="AbrirDialogPresentacion" aria-label="Agregar" />
                            <ValidationMessage For="@(()=>NuevoProducto.IdPresentacion)"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <MudCheckBox @bind-Checked="@NuevoProducto.AfectaVencimiento" Size="Size.Large" Color="Color.Tertiary">Afecta a vencimiento</MudCheckBox>
                </div>
            </div>
            <div class="row mb-3" hidden="@(!NuevoProducto.AfectaVencimiento)">
                <div class="col-md-6 mt-2">
                    <MudNumericField Min="0" Variant="Variant.Outlined" Label="Cantidad de días mínimo de vencimiento" Step="1" id="minDiaVencimiento" @bind-Value="NuevoProducto.MinDiaVencimiento" />
                </div>
                <div class="col-md-6 mt-2">
                    <MudNumericField Min="0" Variant="Variant.Outlined" Label="Cantidad de días máximo de vencimiento" Step="1" id="maxDiaVencimiento" @bind-Value="NuevoProducto.MaxDiaVencimiento" />
                </div>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-6 text-center">
                <MudFab Color="Color.Success" Icon="@Icons.Material.Filled.AddCircleOutline" ButtonType="ButtonType.Submit" Label="Crear"></MudFab>
            </div>
            <div class="col-6 text-center">
                <MudFab Color="Color.Info" Icon="@Icons.Material.Filled.Loop" OnClick="@LimpiarUi" Label="Limpiar"></MudFab>
            </div>
        </div>
    </EditForm>
}

<MudDialog @bind-IsVisible="NuevoFormatoVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Nuevo formato
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="NuevoFormato" OnValidSubmit="GuardarFormato">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="container-fluid">
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-form-label" for="nuevoNombreFormato">Nombre</label>
                            <MudTextField id="nuevoNombreFormato" Variant="Variant.Outlined" @bind-Value="NuevoFormato.NombreFormato" />
                            <ValidationMessage For="@(()=>NuevoFormato.NombreFormato)"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-form-label" style="font-size: small;" for="nuevaUnidadPorFormato">Unidades por formato</label>
                            <MudNumericField Min="0" Variant="Variant.Outlined" Step="1" id="nuevaUnidadPorFormato" @bind-Value="NuevoFormato.CantidadPorFormato" />
                            <ValidationMessage For="@(()=>NuevoFormato.CantidadPorFormato)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Cancel" Label="Cerrar" OnClick="CerrarNuevoFormato"></MudFab>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="GuardarFormato" Label="Guardar"></MudFab>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="NuevaPresentacionVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Nueva presentación
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="NuevaPresentacion" OnValidSubmit="GuardarPresentacion">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="container-fluid">
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-form-label" for="nuevoNombreFormato">Nombre</label>
                            <MudTextField id="nuevoNombrePresentacion" Variant="Variant.Outlined" @bind-Value="NuevaPresentacion.NombrePresentacion" />
                            <ValidationMessage For="@(()=>NuevaPresentacion.NombrePresentacion)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>

        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Cancel" Label="Cerrar" OnClick="CerrarNuevaPresentacion"></MudFab>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="GuardarFormato" Label="Guardar"></MudFab>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="NuevoGrupoVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" /> Nuevo grupo
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="NuevoGrupo" OnValidSubmit="SubirGrupo">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="container-fluid">
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label class="col-form-label" for="nuevoNombreFormato">Nombre</label>
                            <MudTextField id="nuevoNombreGrupo" Variant="Variant.Outlined" @bind-Value="NuevoGrupo.NombreGrupo" />
                            <ValidationMessage For="@(()=>NuevoGrupo.NombreGrupo)"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="row form-group">
                    <div class="col-md-12">
                        <div class="form-group">
                            <MudFab HtmlTag="label" Color="Color.Secondary" Icon="@Icons.Filled.Image" Label="Subir foto" for="fileInput" />
                        </div>
                    </div>
                </div>
            </div>

        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Cancel" Label="Cerrar" OnClick="CerrarNuevoGrupo"></MudFab>
        <MudFab Size="Size.Medium" Icon="@Icons.Material.Filled.Save" Label="Guardar" Color="Color.Success" OnClick="SubirGrupo"></MudFab>
    </DialogActions>
</MudDialog>

@code {
    protected List<Presentacion> Presentaciones { get; set; }
    protected List<GrupoProducto> Grupos { get; set; }
    protected List<Formato> Formatos { get; set; }

    protected bool NuevoFormatoVisible = false;
    protected bool NuevaPresentacionVisible = false;
    protected bool NuevoGrupoVisible = false;

    protected CrearProductoCommand NuevoProducto = new();
    protected CrearFormatoCommand NuevoFormato = new();
    protected CrearPresentacionCommand NuevaPresentacion = new();
    protected CrearGrupoCommand NuevoGrupo = new();

    protected IJSObjectReference Modulo;

    protected override async Task OnInitializedAsync()
    {
        Presentaciones = await _cliente.GetFromJsonAsync<List<Presentacion>>("api/Presentaciones/ObtenerPresentaciones");
        Grupos = await _cliente.GetFromJsonAsync<List<GrupoProducto>>("api/Grupos/ObtenerGrupos");
        Formatos = await _cliente.GetFromJsonAsync<List<Formato>>("api/Formatos/ObtenerFormatos");
    }

    protected async void AgregarProducto()
    {
        try
        {
            Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
            var result = await _cliente.PostAsJsonAsync("api/Productos/CrearProducto", NuevoProducto);
            if (result.IsSuccessStatusCode)
            {
                await Modulo.InvokeVoidAsync("Exito");
                LimpiarUi();
                StateHasChanged();
            }
            else
            {
                await Modulo.InvokeVoidAsync("Error");
            }
        }
        catch (Exception error)
        {
            await Modulo.InvokeVoidAsync("Error");
            Console.WriteLine(error.Message);
        }
    }

    protected void LimpiarUi() => NuevoProducto = new();

    protected void AbrirDialogFormato() => NuevoFormatoVisible = true;
    protected void AbrirDialogGrupo() => NuevoGrupoVisible = true;
    protected void AbrirDialogPresentacion() => NuevaPresentacionVisible = true;

    protected void CerrarNuevoFormato() => NuevoFormatoVisible = false;
    protected void CerrarNuevoGrupo() => NuevoGrupoVisible = false;
    protected void CerrarNuevaPresentacion() => NuevaPresentacionVisible = false;

    protected async void GuardarFormato()
    {
        try
        {
            Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
            await Modulo.InvokeVoidAsync("Exito");
        }
        catch (Exception error)
        {
            Console.WriteLine(error.Message);
            await Modulo.InvokeVoidAsync("Error");
        }
    }

    protected async void GuardarPresentacion()
    {
        try
        {
            Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
            await Modulo.InvokeVoidAsync("Exito");
        }
        catch (Exception error)
        {
            Console.WriteLine(error.Message);
            await Modulo.InvokeVoidAsync("Error");
        }
    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var stream = file.OpenReadStream();
            var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            NuevoGrupo.FileName = file.Name;
            NuevoGrupo.ArchivoStream = ms.ToArray();
            ms.Close();
        }
    }

    private async void SubirGrupo()
    {
        try
        {
            Modulo = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/Utilidades.js");
            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/grupos/");
            var fs = File.Create(Path.Combine(path, NuevoGrupo.FileName));

            await fs.WriteAsync(NuevoGrupo.ArchivoStream.AsMemory(0, NuevoGrupo.ArchivoStream.Length), CancellationToken.None);

            fs.Close();
            await Modulo.InvokeVoidAsync("Exito");
            //var result = await _cliente.PostAsJsonAsync<CrearGrupo>("api/Grupos/NuevoGrupo", NuevoGrupo);
            this.StateHasChanged();
        }
        catch (Exception error)
        {
            await Modulo.InvokeVoidAsync("Error");
            Console.WriteLine(error.Message);
        }
    }

}
